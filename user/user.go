package user

import (
	"errors"
	"regexp"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

var (
	// EmailValidatorRegEx checks if a string is a valid email address.
	// See https://emailregex.com/
	EmailValidatorRegEx = regexp.MustCompile(`[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}`)

	// ErrInvalidEmail is returned when we encounter an invalid email value.
	ErrInvalidEmail = errors.New("invalid email")
)

type (
	// Email is an email.
	Email string

	// Hash represents a 256bit hash value.
	Hash [32]byte

	// User represents a Skynet user.
	User struct {
		// ID is a hexadecimal string representation of the MongoDB id assigned
		// to this user object. It is auto-generated by Mongo on insert.
		// TODO How to use Mongo's internal ID?
		ID        primitive.ObjectID `json:"_id"`
		FirstName string             `json:"firstName"`
		LastName  string             `json:"lastName"`
		Email     Email              `json:"email"`
		Password  Hash               `json:"password"`

		// TODO I intentionally won't implement these, yet.
		//Premium bool
		//SubscriptionLevel int // a iota type
	}
)

// Validate validates an email address.
func (e Email) Validate() bool {
	return EmailValidatorRegEx.MatchString(string(e))
}
