package database

import (
	"context"
	"encoding/base64"
	"time"

	"gitlab.com/NebulousLabs/errors"
	"gitlab.com/NebulousLabs/fastrand"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type (
	// TODO: I am still not sure whether we should use separate collections or
	// 	keep all API keys in the same one.

	// PubAPIKey is a base64URL-encoded representation of []byte with length
	// PubKeySize
	PubAPIKey string
	// PubAPIKeyRecord is a non-expiring authentication token generated on user
	// demand. This token allows anyone to access a set of pre-determined
	// skylinks. The traffic generated by this access is counted towards the
	// issuing user's balance.
	PubAPIKeyRecord struct {
		ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
		UserID    primitive.ObjectID `bson:"user_id" json:"userID"`
		Key       PubAPIKey          `bson:"key" json:"key"`
		Skylinks  []string           `bson:"skylinks" json:"skylinks"`
		CreatedAt time.Time          `bson:"created_at" json:"createdAt"`
	}
)

// PubAPIKeyCreate creates a new public API key.
func (db *DB) PubAPIKeyCreate(ctx context.Context, user User, skylinks []string) (*PubAPIKeyRecord, error) {
	if user.ID.IsZero() {
		return nil, errors.New("invalid user")
	}
	n, err := db.staticPubAPIKeys.CountDocuments(ctx, bson.M{"user_id": user.ID})
	if err != nil {
		return nil, errors.AddContext(err, "failed to ensure user can create a new API key")
	}
	if n > int64(MaxNumAPIKeysPerUser) {
		return nil, ErrMaxNumAPIKeysExceeded
	}
	// Validate all given skylinks.
	for _, s := range skylinks {
		if !ValidSkylinkHash(s) {
			return nil, ErrInvalidSkylink
		}
	}
	ak := PubAPIKeyRecord{
		UserID:    user.ID,
		Key:       PubAPIKey(base64.URLEncoding.EncodeToString(fastrand.Bytes(PubKeySize))),
		Skylinks:  skylinks,
		CreatedAt: time.Now().UTC(),
	}
	ior, err := db.staticAPIKeys.InsertOne(ctx, ak)
	if err != nil {
		return nil, err
	}
	ak.ID = ior.InsertedID.(primitive.ObjectID)
	return &ak, nil
}

// PubAPIKeyUpdate updates an existing PubAPIKey. This works by replacing the
// list of Skylinks within the PubAPIKey record.
func (db *DB) PubAPIKeyUpdate(ctx context.Context, user User, keyID primitive.ObjectID, skylinks []string) error {
	if user.ID.IsZero() {
		return errors.New("invalid user")
	}
	// Validate all given skylinks.
	for _, s := range skylinks {
		if !ValidSkylinkHash(s) {
			return ErrInvalidSkylink
		}
	}
	filter := bson.M{
		"_id":     keyID,
		"user_id": user.ID,
	}
	update := bson.M{"skylinks": skylinks}
	opts := options.UpdateOptions{
		Upsert: &False,
	}
	_, err := db.staticPubAPIKeys.UpdateOne(ctx, filter, update, &opts)
	return err
}

// PubAPIKeyDelete deletes a public API key.
func (db *DB) PubAPIKeyDelete(ctx context.Context, user User, akID string) error {
	if user.ID.IsZero() {
		return errors.New("invalid user")
	}
	id, err := primitive.ObjectIDFromHex(akID)
	if err != nil {
		return errors.AddContext(err, "invalid API key ID")
	}
	filter := bson.M{
		"_id":     id,
		"user_id": user.ID,
	}
	dr, err := db.staticPubAPIKeys.DeleteOne(ctx, filter)
	if err != nil {
		return err
	}
	if dr.DeletedCount == 0 {
		return mongo.ErrNoDocuments
	}
	return nil
}

// PubAPIKeyList lists all public API keys that belong to the user.
func (db *DB) PubAPIKeyList(ctx context.Context, user User) ([]*PubAPIKeyRecord, error) {
	if user.ID.IsZero() {
		return nil, errors.New("invalid user")
	}
	c, err := db.staticPubAPIKeys.Find(ctx, bson.M{"user_id": user.ID})
	if err != nil {
		return nil, err
	}
	var aks []*PubAPIKeyRecord
	err = c.All(ctx, &aks)
	if err != nil {
		return nil, err
	}
	return aks, nil
}
